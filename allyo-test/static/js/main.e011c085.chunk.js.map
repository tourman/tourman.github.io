{"version":3,"sources":["components/Records/actions.js","components/Records/filter.js","components/Records/reducer.js","components/Records/Search/View.js","components/Records/Search/Container.js","components/Records/Stat.js","components/Records/TableCell.js","components/Records/tablePropTypes.js","components/Records/TableHead.js","components/Records/Status.js","components/Records/TableRow.js","components/Records/Table.js","components/Records/Records.js","components/Records/index.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["actionTypes","reduce","acc","type","match","memoize","name","role","status","search","find","value","toLowerCase","trim","replace","includes","records","normalized","sections","split","or","length","and","filter","record","initialState","cloneDeepWith","data","connectedOn","Date","statuses","roles","view","keys","Array","isArray","map","index","id","String","toISOString","updateView","draft","Object","values","keySet","Set","flat","delete","RecordsSearchView","onEvent","Paper","style","padding","overflow","float","onClick","cursor","InputBase","width","placeholder","onChange","slowdown","debounce","RecordsSearchContainer","initialSearch","useState","setSearch","onSearch","View","e","newSearch","target","RecordsStat","margin","entries","count","Chip","key","marginRight","label","memo","props","TableCell","row","PropTypes","shape","string","isRequired","arrayOf","objectOf","columns","TableHead","TableRow","align","connect","state","dispatch","onStatus","STATUS","payload","FormControl","NativeSelect","hover","tabIndex","Status","RecordsTable","rows","Table","stickyHeader","TableBody","getColumns","Records","SEARCH","onInit","INIT","useEffect","Stat","reducer","getState","parseInt","Error","JSON","stringify","produce","App","CssBaseline","AppBar","position","Toolbar","Typography","component","variant","color","noWrap","config","version","paddingTop","maxWidth","Grid","container","spacing","item","xs","Boolean","window","location","hostname","store","createStore","applyMiddleware","createLogger","diff","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e011c085.chunk.js","sourcesContent":["export const actionTypes = ['INIT', 'SEARCH', 'STATUS'].reduce((acc, type) => {\n  acc[type] = type;\n  return acc;\n}, {});\n\nexport default actionTypes;\n","import memoize from 'lodash/memoize';\n\nconst match = memoize(({ name, role, status }) =>\n  memoize(search =>\n    [name, role, status].find(value =>\n      value\n        .toLowerCase()\n        .trim()\n        .replace(/[^a-z0-9]+/gim, ' ')\n        .includes(search))));\n\nexport default memoize(records =>\n  memoize(search => {\n    const normalized = search\n      .toLowerCase()\n      .trim()\n      .replace(/\\s+/gm, ' ');\n    const sections = normalized.split(/\\s/gm);\n    const or = sections.length === 3 && sections[1] === 'or';\n    const and = sections.length === 3 && sections[1] === 'and';\n    if (or) {\n      return records.filter(record => match(record)(sections[0]) || match(record)(sections[2]));\n    }\n    if (and) {\n      return records.filter(record => match(record)(sections[0]) && match(record)(sections[2]));\n    }\n    return records.filter(record => match(record)(normalized));\n  }));\n","import produce from 'immer';\nimport cloneDeepWith from 'lodash/cloneDeepWith';\n\nimport { actionTypes } from './actions';\nimport filter from './filter';\n\nconst initialState = cloneDeepWith(\n  {\n    data: {\n      records: [\n        {\n          name: 'AB Ceed',\n          role: 'engineer',\n          connectedOn: new Date('2019-01-01'),\n          status: 'screen',\n        },\n        {\n          name: 'John Smith',\n          role: 'sales',\n          connectedOn: new Date('2019-01-02'),\n          status: 'explored',\n        },\n        {\n          name: 'A.B.C.',\n          role: 'customerSupport',\n          connectedOn: new Date('2019-01-03'),\n          status: 'hire',\n        },\n        {\n          name: 'D. E. F.',\n          role: 'manager',\n          connectedOn: new Date('2019-01-03'),\n          status: 'scheduled',\n        },\n        {\n          name: 'Master of Engine',\n          role: 'manager',\n          connectedOn: new Date('2019-01-05'),\n          status: 'screen',\n        },\n        {\n          name: 'Donald Scrooge',\n          role: 'engineer',\n          connectedOn: new Date('2019-01-07'),\n          status: 'expored',\n        },\n      ],\n      statuses: ['screen', 'explored', 'hire', 'scheduled'],\n      roles: ['engineer', 'sales', 'customerSupport', 'manager'],\n    },\n    view: {\n      keys: [],\n      records: {},\n      search: '',\n      statuses: {\n        // each key is a status, each value is a counter\n      },\n    },\n  },\n  value => {\n    if (value && Array.isArray(value.records)) {\n      value.records = value.records.map(({ connectedOn, ...record }, index) => ({\n        id: String(index),\n        ...record,\n        connectedOn: connectedOn.toISOString(),\n      }));\n      return value;\n    }\n  },\n);\n\nconst updateView = draft => {\n  const { search } = draft.view;\n  const { records } = draft.data;\n  draft.view.records = filter(records)(search).reduce((acc, record) => {\n    acc[record.id] = record;\n    return acc;\n  }, {});\n  draft.view.statuses = draft.data.statuses.reduce((acc, status) => {\n    acc[status] = Object.values(draft.view.records).filter(record => record.status === status).length;\n    return acc;\n  }, {});\n  if (!draft.view.keys.length) {\n    const keySet = new Set(records.map(record => Object.keys(record)).flat());\n    keySet.delete('id');\n    draft.view.keys = [...keySet];\n  }\n};\n\nexport default (state = initialState, { type, payload }) => {\n  const getState = {\n    [actionTypes.INIT]: draft => {\n      updateView(draft);\n    },\n    [actionTypes.SEARCH]: draft => {\n      const { search } = payload;\n      draft.view.search = search;\n      updateView(draft);\n    },\n    [actionTypes.STATUS]: draft => {\n      const { id, status } = payload;\n      const index = parseInt(id, 10);\n      const { records, statuses } = state.data;\n      if (index > records.length || index < 0) {\n        throw new Error(`Invalid index '${index}'. It should be lower than ${records.length}`);\n      }\n      if (!statuses.includes(status)) {\n        throw new Error(`Invalid status '${status}'. It should be one of ${JSON.stringify(statuses)}`);\n      }\n      draft.data.records[index].status = status;\n      updateView(draft);\n    },\n  }[type];\n  return (getState && produce(state, getState)) || state;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nfunction RecordsSearchView({ search, onEvent }) {\n  return (\n    <Paper style={{ padding: 16 }}>\n      <div style={{ overflow: 'hidden' }}>\n        <div style={{ float: 'left' }}>\n          {search.length ? <ClearIcon onClick={onEvent} style={{ cursor: 'pointer' }} /> : <SearchIcon />}\n        </div>\n        <InputBase\n          style={{ float: 'left', width: 'calc(100% - 50px)' }}\n          placeholder=\"Search…\"\n          value={search}\n          onChange={onEvent}\n        />\n      </div>\n    </Paper>\n  );\n}\n\nRecordsSearchView.propTypes = {\n  search: PropTypes.string.isRequired,\n  onEvent: PropTypes.func.isRequired,\n};\n\nexport default RecordsSearchView;\n","import React, { useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport memoize from 'lodash/memoize';\nimport PropTypes from 'prop-types';\n\nimport View from './View';\n\nconst slowdown = memoize(debounce);\n\nfunction RecordsSearchContainer({ search: initialSearch, onChange }) {\n  const [search, setSearch] = useState(initialSearch);\n  const onSearch = slowdown(onChange, 200);\n  const handleEvent = e => {\n    const newSearch = e.target.value || '';\n    setSearch(newSearch);\n    onSearch(newSearch);\n  };\n  return <View search={search} onEvent={handleEvent} />;\n}\n\nRecordsSearchContainer.propTypes = {\n  search: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default RecordsSearchContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\n\nfunction RecordsStat({ statuses }) {\n  return (\n    <div style={{ margin: '16px 0' }}>\n      {Object.entries(statuses).map(([status, count]) => (\n        <Chip key={status} style={{ marginRight: 8 }} label={`${status}: ${count}`} />\n      ))}\n    </div>\n  );\n}\n\nRecordsStat.propTypes = {\n  statuses: PropTypes.objectOf(PropTypes.number).isRequired,\n};\n\nexport default RecordsStat;\n","import React, { memo } from 'react';\nimport TableCell from '@material-ui/core/TableCell';\n\nfunction RecordsTableCell(props) {\n  return <TableCell style={{ width: '25%' }} {...props} />;\n}\n\nexport default memo(RecordsTableCell);\n","import PropTypes from 'prop-types';\n\nconst row = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n});\n\nexport default {\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n    }),\n  ),\n  rows: PropTypes.objectOf(row),\n  row,\n};\n","import React, { memo } from 'react';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TableCell from './TableCell';\nimport TablePropTypes from './tablePropTypes';\n\nfunction RecordsTableHead({ columns }) {\n  return (\n    <TableHead>\n      <TableRow>\n        {columns.map(({ id, label }) => (\n          <TableCell key={id} align=\"left\">\n            {label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nRecordsTableHead.propTypes = {\n  columns: TablePropTypes.columns.isRequired,\n};\n\nexport default memo(RecordsTableHead);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect from '@material-ui/core/NativeSelect';\n\nimport { actionTypes } from './actions';\n\nfunction RecordsStatus({ id, value, statuses, onStatus }) {\n  return (\n    <FormControl>\n      <NativeSelect value={value} onChange={e => onStatus({ id, status: e.target.value })}>\n        {statuses.map(status => (\n          <option key={status} value={status}>\n            {status}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n}\n\nRecordsStatus.propTypes = {\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  statuses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onStatus: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  state => state.data,\n  dispatch => ({\n    onStatus: ({ id, status }) => dispatch({ type: actionTypes.STATUS, payload: { id, status } }),\n  }),\n)(RecordsStatus);\n","import React, { memo } from 'react';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TableCell from './TableCell';\nimport Status from './Status';\nimport TablePropTypes from './tablePropTypes';\n\nfunction RecordsTabelRow({ columns, row }) {\n  return (\n    <TableRow hover role=\"checkbox\" tabIndex={-1}>\n      {columns.map(({ id }) => {\n        const value = row[id];\n        return (\n          <TableCell key={id} align=\"left\">\n            {id === 'status' ? <Status id={row.id} value={value} /> : value}\n          </TableCell>\n        );\n      })}\n    </TableRow>\n  );\n}\n\nRecordsTabelRow.propTypes = {\n  columns: TablePropTypes.columns.isRequired,\n  row: TablePropTypes.row.isRequired,\n};\n\nexport default memo(RecordsTabelRow);\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\n\nimport TableHead from './TableHead';\nimport TableRow from './TableRow';\nimport TablePropTypes from './tablePropTypes';\n\nfunction RecordsTable({ columns, rows }) {\n  return (\n    <Paper>\n      <Table stickyHeader>\n        <TableHead columns={columns} />\n        <TableBody>\n          {Object.values(rows).map(row => (\n            <TableRow key={row.id} columns={columns} row={row} />\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nRecordsTable.propTypes = {\n  columns: TablePropTypes.columns.isRequired,\n  rows: TablePropTypes.rows.isRequired,\n};\n\nexport default RecordsTable;\n","import React, { useEffect } from 'react';\nimport memoize from 'lodash/memoize';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { actionTypes } from './actions';\nimport Search from './Search';\nimport Stat from './Stat';\nimport Table from './Table';\n\nconst getColumns = memoize(keys => keys.map(key => ({ id: key, label: key })));\n\nfunction Records({ search, statuses, keys, records, onInit, onSearch }) {\n  useEffect(() => {\n    onInit();\n  }, []);\n  return (\n    <>\n      <Search search={search} onChange={onSearch} />\n      <Stat statuses={statuses} />\n      <Table columns={getColumns(keys)} rows={records} />\n    </>\n  );\n}\n\nRecords.propTypes = {\n  keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n  records: PropTypes.objectOf(PropTypes.shape({})).isRequired,\n  statuses: PropTypes.objectOf(PropTypes.number).isRequired,\n  search: PropTypes.string.isRequired,\n  onInit: PropTypes.func.isRequired,\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  state => state.view,\n  dispatch => ({\n    onSearch: search => dispatch({ type: actionTypes.SEARCH, payload: { search } }),\n    onInit: () => dispatch({ type: actionTypes.INIT }),\n  }),\n)(Records);\n","import reducer from './reducer';\nimport Records from './Records';\n\nexport { reducer };\n\nexport default Records;\n","import { reducer } from 'components/Records';\n\nexport default reducer;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Records from 'components/Records';\n\nimport config from '../package.json';\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n\n      <AppBar position=\"absolute\">\n        <Toolbar>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\n            {`${config.name} v${config.version}`}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <main style={{ paddingTop: 100 }}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Records />\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\n\nimport reducer from './reducer';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, applyMiddleware(createLogger({ diff: true })));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}