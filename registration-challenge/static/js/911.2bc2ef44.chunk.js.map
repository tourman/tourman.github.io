{"version":3,"file":"static/js/911.2bc2ef44.chunk.js","mappings":"2KAUA,MAgFA,EAhFyC,SAAwBA,GAO7D,IAP8D,YAChEC,EAAW,KACXC,EAAI,QACJC,EAAO,gBACPC,EAAe,sBACfC,KACGC,GACJN,EACC,OAEIO,SAAS,MAAEC,KAAUD,GAAS,WAC9BE,EAAU,WACVC,GAEFC,IACEC,EAAAA,EAAAA,YAAWT,EAAS,KAAMC,GACxBS,GAAWC,EAAAA,EAAAA,cAEbC,GAIGJ,EAAS,CAAEK,KAAM,SAAUD,aAChC,IAEIE,GAAWH,EAAAA,EAAAA,cAAY,IAAMH,EAAS,CAAEK,KAAM,YAAa,IAC3DE,GAAOC,EAAAA,EAAAA,SAAQlB,EAAa,CAACA,KACnCmB,EAAAA,EAAAA,YAAU,KACR,IAAKX,EACH,OAEF,MAAMY,EAAQC,OAAOC,YACnBD,OAAOE,QAAQf,GAAYgB,QAAOC,IAAA,IAAE,CAAEC,GAAMD,EAAA,OAAe,OAAVC,CAAc,KAI3DC,EAAe,mBAAAC,EAAAC,UAAAC,OAAIC,EAAI,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,GAAAJ,UAAAI,GAAA,OAC3B7B,GAAsB,IAAMM,KAAYqB,IAAO,EACjDd,EAAKiB,IAAId,GAETH,EACGkB,WACAC,MAAK,IAAMT,EAAa,CAAEZ,KAAM,WAAYsB,UAAW7B,MACvD8B,OAAOC,GACNZ,EAAa,CAAEZ,KAAM,WAAYR,MAAOgC,EAAKF,UAAW7B,KACzD,GACF,CAACS,EAAMT,EAAYJ,IACtB,MAAOoC,EAAeC,IAAoBC,EAAAA,EAAAA,aAC1CvB,EAAAA,EAAAA,YAAU,KACHV,GAILR,EAAKQ,GACF2B,MAAK,IAAM1B,EAAS,CAAEK,KAAM,WAC5BuB,OAAOC,IACN7B,EAAS,CAAEK,KAAM,QAASR,MAAOgC,IACjCE,EAAiBF,EAAI,GACrB,GACH,CAACtC,EAAMQ,IACV,MAAM,cAAEkC,GAAkB1B,EAAK2B,WACxBC,EAAWC,IAAgBJ,EAAAA,EAAAA,UAEhC,CAAC,GAMH,OALAK,EAAAA,EAAAA,kBAAgB,KACdJ,IAAgBP,MAAMY,GACpB5C,GAAsB,IAAM0C,EAAaE,MAC1C,GACA,CAACL,EAAevC,IACZ,CACLQ,WACAI,cACGV,EACHC,MAAOA,EAAQiC,OAAgB,EAC/BvB,OACA4B,eACGxC,EAEP,C","sources":["feature/registration/useRegistration.ts"],"sourcesContent":["import type { UseRegistration } from 'feature/registration';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react';\n\nconst useRegistration: UseRegistration = function useRegistration({\n  userFactory,\n  save,\n  reducer,\n  getInitialState,\n  registerSecondaryTask,\n  ...rest\n}) {\n  const [\n    {\n      display: { error, ...display },\n      validating,\n      submitting,\n    },\n    dispatch,\n  ] = useReducer(reducer, null, getInitialState);\n  const onChange = useCallback(\n    (\n      payload: Extract<\n        Parameters<typeof dispatch>[0],\n        { type: 'CHANGE' }\n      >['payload'],\n    ) => dispatch({ type: 'CHANGE', payload }),\n    [],\n  );\n  const onSubmit = useCallback(() => dispatch({ type: 'SUBMIT' }), []);\n  const user = useMemo(userFactory, [userFactory]);\n  useEffect(() => {\n    if (!validating) {\n      return;\n    }\n    const entry = Object.fromEntries(\n      Object.entries(validating).filter(([, value]) => value !== null),\n    ) as {\n      [K in keyof typeof validating]: NonNullable<(typeof validating)[K]>;\n    };\n    const dispatchTask = (...args: Parameters<typeof dispatch>) =>\n      registerSecondaryTask(() => dispatch(...args));\n    user.set(entry);\n    // todo: discard update after unmount\n    user\n      .validate()\n      .then(() => dispatchTask({ type: 'VALIDATE', validated: validating }))\n      .catch((err) =>\n        dispatchTask({ type: 'VALIDATE', error: err, validated: validating }),\n      );\n  }, [user, validating, registerSecondaryTask]);\n  const [errorInstance, setErrorInstance] = useState<Error | undefined>();\n  useEffect(() => {\n    if (!submitting) {\n      return;\n    }\n    // todo: discard after unmount\n    save(submitting)\n      .then(() => dispatch({ type: 'DONE' }))\n      .catch((err) => {\n        dispatch({ type: 'ERROR', error: err });\n        setErrorInstance(err);\n      });\n  }, [save, submitting]);\n  const { loadCountries } = user.validator;\n  const [countries, setCountries] = useState<\n    Awaited<ReturnType<typeof loadCountries>>\n  >({});\n  useLayoutEffect(() => {\n    loadCountries().then((newCountries) =>\n      registerSecondaryTask(() => setCountries(newCountries)),\n    );\n  }, [loadCountries, registerSecondaryTask]);\n  return {\n    onChange,\n    onSubmit,\n    ...display,\n    error: error ? errorInstance : void 0,\n    user,\n    countries,\n    ...rest,\n  };\n};\n\nexport default useRegistration;\n"],"names":["_ref","userFactory","save","reducer","getInitialState","registerSecondaryTask","rest","display","error","validating","submitting","dispatch","useReducer","onChange","useCallback","payload","type","onSubmit","user","useMemo","useEffect","entry","Object","fromEntries","entries","filter","_ref2","value","dispatchTask","_len","arguments","length","args","Array","_key","set","validate","then","validated","catch","err","errorInstance","setErrorInstance","useState","loadCountries","validator","countries","setCountries","useLayoutEffect","newCountries"],"sourceRoot":""}