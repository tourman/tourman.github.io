{"version":3,"file":"static/js/430.f59a834c.chunk.js","mappings":"yKAIA,MAAMA,EAAcA,KAAMC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAuD1B,QArDA,SAAaC,GAkBT,IAlBU,QACZC,EAAO,MACPC,EAAK,KACLC,EAAI,EACJC,EAAC,KACDC,EAAI,iBACJC,EAAmBT,EAAW,eAC9BU,EAAiBV,EAAW,OAE5BW,EAAM,OACNC,EAAM,QACNC,EAAO,MACPC,GAMDX,EACC,OACEY,EAAAA,EAAAA,MAAAb,EAAAA,SAAA,CAAAc,SAAA,EACEf,EAAAA,EAAAA,KAACU,EAAM,CAACM,OAAQb,EAASc,UAAQ,EAAAF,UAC/Bf,EAAAA,EAAAA,KAACW,EAAM,MAERP,IAASJ,EAAAA,EAAAA,KAACY,EAAO,CAACR,OAAK,EAACc,QAASd,EAAMe,YACrCd,EAAKe,SACNN,EAAAA,EAAAA,MAACD,EAAK,CAACQ,QAAM,EAAAN,SAAA,EACXf,EAAAA,EAAAA,KAACa,EAAMS,OAAM,CAAAP,UACXD,EAAAA,EAAAA,MAACD,EAAMU,IAAG,CAAAR,SAAA,EACRf,EAAAA,EAAAA,KAACa,EAAMW,WAAU,CAAAT,SAAET,EAAE,WACrBN,EAAAA,EAAAA,KAACa,EAAMW,WAAU,CAAAT,SAAET,EAAE,cACrBN,EAAAA,EAAAA,KAACa,EAAMW,WAAU,CAAAT,SAAET,EAAE,eACpBE,UAGLR,EAAAA,EAAAA,KAACa,EAAMY,KAAI,CAAAV,SACRV,EAAKqB,KAAI,CAAAC,EAA4CC,KAAK,IAAhD,GAAEC,EAAE,KAAEC,EAAI,QAAEC,EAAO,QAAEC,EAAO,UAAEC,GAAWN,EAAA,OAClDb,EAAAA,EAAAA,MAACD,EAAMU,IAAG,CAAAR,SAAA,EACRD,EAAAA,EAAAA,MAACD,EAAMqB,KAAI,CAAAnB,SAAA,CACRe,EAAK,IAAEC,MAEV/B,EAAAA,EAAAA,KAACa,EAAMqB,KAAI,CAAAnB,SAAET,EAAE,WAAD6B,OAAYH,OAC1BhC,EAAAA,EAAAA,KAACa,EAAMqB,KAAI,CAAAnB,SAAER,EAAK6B,WAAWH,KAC5BxB,EAAemB,KANFC,EAOJ,WAO1B,C","sources":["feature/list/component/List/index.tsx"],"sourcesContent":["import type { InnerProps } from 'feature/list';\nimport type * as SUIR from 'semantic-ui-react';\nimport './style.css';\n\nconst emptyRender = () => <></>;\n\nfunction List({\n  loading,\n  error,\n  list,\n  T,\n  Time,\n  renderHeaderCell = emptyRender,\n  renderBodyCell = emptyRender,\n\n  Dimmer,\n  Loader,\n  Message,\n  Table,\n}: InnerProps & {\n  Dimmer: typeof SUIR.Dimmer;\n  Loader: typeof SUIR.Loader;\n  Message: typeof SUIR.Message;\n  Table: typeof SUIR.Table;\n}) {\n  return (\n    <>\n      <Dimmer active={loading} inverted>\n        <Loader />\n      </Dimmer>\n      {error && <Message error content={error.message} />}\n      {!!list.length && (\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>{T('Name')}</Table.HeaderCell>\n              <Table.HeaderCell>{T('Country')}</Table.HeaderCell>\n              <Table.HeaderCell>{T('Birthdate')}</Table.HeaderCell>\n              {renderHeaderCell()}\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {list.map(({ id, name, surname, country, birthdate }, index) => (\n              <Table.Row key={id}>\n                <Table.Cell>\n                  {name} {surname}\n                </Table.Cell>\n                <Table.Cell>{T(`country:${country}`)}</Table.Cell>\n                <Table.Cell>{Time.formatDate(birthdate)}</Table.Cell>\n                {renderBodyCell(index)}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </>\n  );\n}\n\nexport default List;\n"],"names":["emptyRender","_jsx","_Fragment","_ref","loading","error","list","T","Time","renderHeaderCell","renderBodyCell","Dimmer","Loader","Message","Table","_jsxs","children","active","inverted","content","message","length","celled","Header","Row","HeaderCell","Body","map","_ref2","index","id","name","surname","country","birthdate","Cell","concat","formatDate"],"sourceRoot":""}