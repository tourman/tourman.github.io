{"version":3,"file":"static/js/450.fd6d11f8.chunk.js","mappings":"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","sources":["feature/registration/reducer/reducer/combined.ts"],"sourcesContent":["import type { Key, ValidationType } from 'entity/user';\nimport { keys } from 'entity/user';\nimport type { Action, State } from 'feature/registration';\nimport { produce } from 'immer';\n\nconst immerReducerFactory =\n  (validate: (state: State) => void) =>\n  (state: State, action: Action): State => {\n    validate(state);\n    const { type } = action;\n    let result: State = state;\n    function setAllowSubmit() {\n      const noErrors = !keys\n        .map((key) => result.display[key].error)\n        .filter((error) => error).length;\n      const allFilled = !keys\n        .map((key) => result.display[key].value)\n        .filter((value) => value === '').length;\n      const allowSubmit =\n        noErrors && allFilled && !result.submitting && !result.validating;\n      if (result.display.allowSubmit !== allowSubmit) {\n        result = { ...result };\n        result.display = { ...result.display, allowSubmit };\n      }\n    }\n    // todo: move the new changes to the new reducer instance\n    if (type === 'CHANGE') {\n      (() => {\n        if (state.submitting) {\n          return;\n        }\n        const { payload } = action;\n        let toValidate = false;\n        let replaced = false;\n        for (const key of keys) {\n          const value = payload[key];\n          const field = result.display[key];\n          if (typeof value !== 'undefined' && field.value !== value) {\n            toValidate = true;\n            if (!replaced) {\n              replaced = true;\n              result = { ...result };\n              result.display = { ...result.display };\n            }\n            result.display[key] = { ...field, value };\n          }\n        }\n        if (toValidate) {\n          const validating = {} as NonNullable<typeof state.validating>;\n          for (const key of keys) {\n            validating[key] = result.display[key].value;\n          }\n          result = { ...result, validating };\n        }\n        if (result.display.done !== null) {\n          if (!replaced) {\n            result = { ...result };\n          }\n          result.display = { ...result.display, done: null };\n        }\n      })();\n    } else if (type === 'VALIDATE') {\n      (() => {\n        const { validated, error } = action;\n        if (validated !== state.validating) {\n          return;\n        }\n        const errorList = error?.errors ?? [];\n        const errors = errorList.reduce((acc, { key, reason }) => {\n          acc[key] = typeof reason === 'string' ? reason : reason.message;\n          return acc;\n        }, {} as Record<Key, ValidationType>);\n        let replaced = false;\n        function replace() {\n          if (replaced) return;\n          replaced = true;\n          result = { ...result };\n          result.display = { ...result.display };\n        }\n        for (const key of keys) {\n          const reason = errors[key] ?? null;\n          if (reason === 'FULL_STRING') {\n            if (result.display[key].error !== null) {\n              replace();\n              result.display[key] = { ...result.display[key], error: null };\n            }\n          } else if (reason !== state.display[key].error) {\n            if (result.display[key].error !== reason) {\n              replace();\n              result.display[key] = { ...result.display[key], error: reason };\n            }\n          }\n        }\n        if (result.validating !== null) {\n          replace();\n          result = { ...result, validating: null };\n        }\n      })();\n    } else {\n      result = produce(state, (draft) => {\n        function setSubmitting() {\n          draft.display.submitting = !!draft.submitting;\n        }\n        switch (type) {\n          case 'DONE': {\n            draft.submitting = null;\n            for (const key of keys) {\n              draft.display[key].value = '';\n            }\n            draft.display.error = false;\n            draft.display.done = state.submitting;\n            break;\n          }\n          case 'ERROR': {\n            draft.submitting = null;\n            draft.display.error = true;\n            break;\n          }\n          case 'SUBMIT': {\n            if (!state.display.allowSubmit) {\n              break;\n            }\n            const submitting = {} as NonNullable<typeof state.submitting>;\n            for (const key of keys) {\n              const { value } = state.display[key];\n              if (value === null) {\n                break;\n              }\n              submitting[key] = value;\n            }\n            draft.submitting = submitting;\n            draft.display.error = false;\n            break;\n          }\n        }\n        setSubmitting();\n      });\n    }\n    setAllowSubmit();\n\n    validate(result);\n    return result;\n  };\n\nexport default immerReducerFactory;\n"],"names":["validate","state","action","type","result","submitting","payload","toValidate","replaced","key","keys","value","field","display","validating","done","_error$errors","validated","error","errors","reduce","acc","_ref","reason","message","replace","_errors$key","produce","draft","allowSubmit","noErrors","map","filter","length","allFilled","setAllowSubmit"],"sourceRoot":""}