{"version":3,"file":"static/js/603.56b65e47.chunk.js","mappings":"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","sources":["../node_modules/immer/src/utils/env.ts","../node_modules/immer/src/utils/errors.ts","../node_modules/immer/src/utils/common.ts","../node_modules/immer/src/utils/plugins.ts","../node_modules/immer/src/core/scope.ts","../node_modules/immer/src/core/finalize.ts","../node_modules/immer/src/core/proxy.ts","../node_modules/immer/src/core/immerClass.ts","../node_modules/immer/src/core/current.ts","../node_modules/immer/src/immer.ts"],"sourcesContent":["// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n","export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tObject.entries(obj).forEach(([key, value]) => {\n\t\t\titer(key, value, obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: boolean) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tif (!strict && isPlainObject(base)) {\n\t\tif (!getPrototypeOf(base)) {\n\t\t\tconst obj = Object.create(null)\n\t\t\treturn Object.assign(obj, base)\n\t\t}\n\t\treturn {...base}\n\t}\n\n\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = Reflect.ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (_key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: boolean = false\n\n\tconstructor(config?: {autoFreeze?: boolean; useStrictShallowCopy?: boolean}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: boolean) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n"],"names":["NOTHING","Symbol","for","DRAFTABLE","DRAFT_STATE","die","error","Error","concat","getPrototypeOf","Object","isDraft","value","isDraftable","_value$constructor","isPlainObject","Array","isArray","constructor","isMap","isSet","objectCtorString","prototype","toString","proto","Ctor","hasOwnProperty","call","Function","each","obj","iter","getArchtype","entries","forEach","_ref","key","entry","index","thing","state","type_","has","prop","set","propOrOldValue","t","add","target","Map","Set","latest","copy_","base_","shallowCopy","base","strict","slice","create","assign","descriptors","getOwnPropertyDescriptors","keys","Reflect","ownKeys","i","length","desc","writable","configurable","get","enumerable","freeze","deep","arguments","undefined","isFrozen","clear","delete","dontMutateFrozenCollections","_key","currentScope","plugins","getPlugin","pluginKey","plugin","getCurrentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer2","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","modified_","finalize","maybeFreeze","generateReplacementPatches_","rootScope","path","childValue","finalizeProperty","scope_","finalized_","resultEach","isSet2","generatePatches_","parentState","targetObject","rootPath","targetIsSet","res","assigned_","autoFreeze_","objectTraps","source","_desc$get","getDescriptorFromProto","draft_","readPropFromProto","peek","prepareCopy","createProxy","current2","currentState","x","y","markChanged","Number","isNaN","deleteProperty","getOwnPropertyDescriptor","owner","defineProperty","setPrototypeOf","arrayTraps","useStrictShallowCopy_","fn","apply","this","parent","proxyMap_","proxySet_","isManual_","traps","revoke","proxy","Proxy","revocable","createProxyProxy","push","currentImpl","copy","immer","config","_this","produce","recipe","defaultBase","self","base2","_len2","args","_key3","hasError","p","ip","produceWithPatches","_len3","_key4","patches","inversePatches","autoFreeze","setAutoFreeze","useStrictShallowCopy","setUseStrictShallowCopy","createDraft","current","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","bind"],"sourceRoot":""}