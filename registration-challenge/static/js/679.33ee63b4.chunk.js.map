{"version":3,"file":"static/js/679.33ee63b4.chunk.js","mappings":"0KA4HA,QAXA,SAA4BA,GAIyB,IAJxB,gBAC3BC,GAGDD,EACC,OAAO,SAAqBE,GAAgC,IAA/B,UAAEC,KAAcC,GAAYF,EACvD,MAAMG,EAAaJ,EAAgBG,GACnC,OAAOE,EAAAA,EAAAA,KAACH,EAAS,IAAKE,GACxB,CACF,C","sources":["feature/registration/index.tsx"],"sourcesContent":["import User, {\n  CountryMap,\n  Entry,\n  Key,\n  PartialEntry,\n  UserFactory,\n  ValidationRejectedResult,\n  ValidationType,\n} from 'entity/user';\nimport { ComponentType } from 'react';\n\ntype Fields = {\n  [K in keyof Entry]: {\n    value: Entry[K];\n    error: null | ValidationType;\n  };\n};\n\ntype Display = Fields & {\n  allowSubmit: boolean;\n  submitting: boolean;\n  error: boolean;\n  done: null | Entry;\n};\n\ntype SerializableEntry = {\n  [K in keyof Entry]: Entry[K];\n};\n\nexport interface State {\n  display: Display;\n  validating: null | SerializableEntry;\n  submitting: null | Entry;\n}\n\ninterface AggregateValidationError {\n  errors: ValidationRejectedResult[];\n}\n\nexport type Action =\n  | { type: 'CHANGE'; payload: PartialEntry }\n  | {\n      type: 'VALIDATE';\n      error?: AggregateValidationError;\n      validated: SerializableEntry;\n    }\n  | { type: 'SUBMIT' }\n  | { type: 'DONE' }\n  | { type: 'ERROR'; error: Error };\n\ninterface Reducer {\n  (state: State, action: Action): State;\n}\n\nexport interface StateValidator {\n  (state: State): void;\n}\n\ninterface ReducerFactory {\n  (validator: StateValidator): Reducer;\n}\n\ninterface GetInitialState {\n  (): State;\n}\n\nexport interface Save {\n  (entry: Entry): Promise<void>;\n}\n\nexport type TranslateArgs =\n  | ['Please fill out the form correctly before submitting']\n  | ['done', Entry]\n  | ['Enter your first name']\n  | ['Enter your second name']\n  | ['Choose your country']\n  | ['Save']\n  | [`label:${Key}`]\n  | [`error:${ValidationType}`]\n  | [`country:${string}`];\n\nexport interface Translate {\n  (...args: TranslateArgs): string;\n}\n\ninterface TransitProps {\n  T: Translate;\n  // todo: use the real lang type\n  lang: string;\n}\n\nexport interface OuterProps extends TransitProps {\n  userFactory: UserFactory;\n  save: Save;\n  reducer: Reducer;\n  getInitialState: GetInitialState;\n  registerSecondaryTask: (task: () => void) => void;\n}\n\nexport interface InnerProps extends Omit<Display, 'error'>, TransitProps {\n  onChange: (payload: PartialEntry) => void;\n  onSubmit: () => void;\n  error?: Error;\n  user: User;\n  countries: CountryMap;\n}\n\nexport interface UseRegistration {\n  (outerProps: OuterProps): InnerProps;\n}\n\nexport type View = ComponentType<InnerProps>;\n\nfunction registrationFactory({\n  useRegistration,\n}: {\n  useRegistration: UseRegistration;\n}): ComponentType<OuterProps & { Component: View }> {\n  return function Registration({ Component, ...outerProps }) {\n    const innerProps = useRegistration(outerProps);\n    return <Component {...innerProps} />;\n  };\n}\n\nexport default registrationFactory;\n"],"names":["_ref","useRegistration","_ref2","Component","outerProps","innerProps","_jsx"],"sourceRoot":""}